<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devblog</title>
    <link>https://devblog-2u3g.onrender.com/</link>
    <description>Recent content on Devblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Dec 2024 16:56:59 +1300</lastBuildDate><atom:link href="https://devblog-2u3g.onrender.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Big O - Brian Holt Course</title>
      <link>https://devblog-2u3g.onrender.com/posts/archive/bigo-brian-holt/</link>
      <pubDate>Fri, 13 Dec 2024 16:56:59 +1300</pubDate>
      
      <guid>https://devblog-2u3g.onrender.com/posts/archive/bigo-brian-holt/</guid>
      <description>BO important details of an algorithm
3x2+x+1 o(n2) look for the biggest term carries most of the weight of the algorithm
Complexity O(n) - goes through all the items in the loops eg for loop v size of input array n is length of the array
no loops constant
big o ignores coeficient just looking for loops
function find(needle, haystack){ for (var i=0; i &amp;lt; haystack.length; i++) { if (haystack === needle) return true; } } still o(n) worst case scenario - last item in array best case scenario - first item in the array bigO doesnt care</description>
    </item>
    
    <item>
      <title>Big O Notation</title>
      <link>https://devblog-2u3g.onrender.com/posts/big_o/</link>
      <pubDate>Fri, 13 Dec 2024 16:56:59 +1300</pubDate>
      
      <guid>https://devblog-2u3g.onrender.com/posts/big_o/</guid>
      <description>Big O is a way to categorize your algorithms time or memory requirements based on input.
Generalize growth of an algorithm.
O(n) - algorithm with grow linerily based on input.
Make decisions about what datastructures and algorithms to use.
Knowing how they perform can help greatly mking the best possible program.
As your input grows how fast does your computation or memory grow.
Growth is with respect to input.
 Simplest trick for complexity look for loops.</description>
    </item>
    
    <item>
      <title>Go Style Guide</title>
      <link>https://devblog-2u3g.onrender.com/posts/go_style_notes/</link>
      <pubDate>Fri, 13 Dec 2024 16:56:59 +1300</pubDate>
      
      <guid>https://devblog-2u3g.onrender.com/posts/go_style_notes/</guid>
      <description>Canonical: Establishes prescriptive and enduring rules Normative: Intended to establish consistency Idiomatic: Common and familiar (Pattern) Style Principles Clarity: codes purpose and rationale is clear to the reader  What is the code actually doing.  Use more descriptive variable names Add additional commentary Break up the code with whitespace and comments Refactor the code into separate functions/methods to make it more modular
Why is the code doing what it actually does.</description>
    </item>
    
    <item>
      <title>Database Design</title>
      <link>https://devblog-2u3g.onrender.com/posts/archive/database_design/</link>
      <pubDate>Sun, 13 Nov 2022 16:56:59 +1300</pubDate>
      
      <guid>https://devblog-2u3g.onrender.com/posts/archive/database_design/</guid>
      <description>Entity Relationship Models DBMS
 data information knowledge intelligence (value of data)  From data to actionable insights
File System Solution
 Separated, isolated data and data duplication Dependancy on applications Incompatible files Lack of data sharing  Database Solution
 A structure that contains data Organise data through entities, attributes, relationships Collection of programs that users interact with a database.  Popular DBMS
 Microsoft Access MySql Progres MongoDb (NoSql)  Advantages</description>
    </item>
    
    <item>
      <title>Design Principles</title>
      <link>https://devblog-2u3g.onrender.com/posts/design_principles/</link>
      <pubDate>Sun, 13 Nov 2022 16:56:59 +1300</pubDate>
      
      <guid>https://devblog-2u3g.onrender.com/posts/design_principles/</guid>
      <description>Low Level Design
Responsibility Assignment
Dependancy Management
Solid Single Responsibility Principle One class should have one and only one resposibility
eg build a hierarchy of base and derived classes eg reservation interface client code does not care about the type of reservation extraneous coupling is not introduced
type Reservation interface { GetReservationDate() string CalculateCancellationFee() float64 ***** Cancel() GetCustomerDetails() []Customer GetSellerDetails() Seller } Open/Closed Principle You should be able to extend a classes behavior without modifying it</description>
    </item>
    
  </channel>
</rss>
